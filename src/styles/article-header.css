.main-header {
  gap: 1rem;
}

.profile-icon {
  float: inline-start;

  inline-size: 3rem;
  block-size: 3rem;
  margin: .75rem .75rem 0 0;
  border-radius: 50%;
}

.heading {
  flex: 1.5;
}

.global-nav {
  display: flex;
  flex: 1;
  flex-direction: column;
  gap: 1.5rem;
}

.bttn,
.dropdown[open] {
  max-inline-size: 22.875rem;
  padding: .75rem 1rem;
  border: 2px solid;
  border-radius: 1.5rem;

  /* When the dropdown is open re-style the summary to prevent wiggle. */
  .bttn {
    padding: 0;
    border: none;
  }
}

@media only screen and (width >= 42em) {
  .profile-icon {
    margin: 0 0 1rem; /* Same as the .heading p; keep content aligned */
  }

  /*
   * .item-wrapper works around the fact that absolutely positioned children of flex containers are
   * positioned "as if it were the sole flex item" rather than preserving their calculated flex
   * position.
   *
   * See: https://chenhuijing.com/blog/flexbox-and-absolute-positioning/
   */
  .dropdown-wrap {
    position: relative;
    max-inline-size: 25.125rem; /* .bttn max-inline-size + padding-inline + border */

    /*
    When the dropdown becomes position: absolute, it causes the other .bttns to move. This should
    make a new block the same height to stop the wiggle.
    */
    &:has([open]) {
      /* manually calculated height from testing.
      height: 66.4px; */
      padding-block: .875rem; /* .bttn padding + border heights */

      &::before {
        content: ' ';
        display: inline-block;
      }
    }

    .dropdown[open] {
      position: absolute;
      z-index: var(--z-dropdown);
      inset-block-start: 0;
      background-color: var(--surface-0);
    }
  }
}

@media only screen and (width >= 88em) {
  .global-nav {
    flex-direction: row;
  }

  ::details-content {
    inline-size: max-content;
  }
}
