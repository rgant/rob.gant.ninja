---
import ArticleHeader from '~/components/article-header.astro';
import BaseHead from '~/components/base-head.astro';
import MySiteNav from '~/components/my-site-nav.astro';
import ScrollNavigation from '~/components/scroll-navigation/scroll-navigation.astro';
import Structure from '~/layouts/structure.astro';
import '~/styles/article-pages.css';
import { unwrap } from '~/unwrap.util';

const description = unwrap`Modern static site development workflow using Astro, TypeScript, custom
  elements, and AWS infrastructure. Covers setup, security, performance, and deployment challenges.`;
---
<Structure>
  <BaseHead description={description} slot="head" title="Building a modern secure static website" />

  <ArticleHeader currentPage="">
    <h1 class="decorated-heading primary">Building My Personal Website</h1>
    <p>A modern approach to static site generation</p>
  </ArticleHeader>

  <article class="presentation">
    <aside>
      <nav aria-labelledby="article-nav">
        <h3 id="article-nav">On this page</h3>
        <ScrollNavigation>
          <ul class="in-page-nav">
            <li><a href="#tools">Why these tools?</a></li>
            <li><a href="#setup">Project setup and structure</a></li>
            <li><a href="#developing">Developing the website</a></li>
            <li><a href="#deploy">Deployment and hosting</a></li>
            <li><a href="#lessons">Lessons learned</a></li>
            <li><a href="#history">Page history</a></li>
          </ul>
        </ScrollNavigation>
      </nav>
    </aside>

    <section id="tools" class="slide">
      <h2 class="decorated-heading second">Why these tools?</h2>

      <ul class="key-points">
        <li>
          <strong>Site Generator:</strong>
          Migrated to
          <a rel="noreferrer" href="https://astro.build/" target="_blank">Astro</a>
          because it treats static sites as first-class rather than an afterthought, eliminating
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/tree/a2f09756cfe1b357689677cf20c234e1354d95fc/packages"
            target="_blank"
          >custom plugin</a>
          requirements while providing built-in <abbr title="Static Site Generation">SSG</abbr> optimizations.
        </li>
        <li>
          <strong>Version Control:</strong>
          <a rel="noreferrer" href="https://git-scm.com/" target="_blank">Git</a>
          is essential for tracking when and why changes were made over time, especially for projects with infrequent but important updates.
        </li>
        <li>
          <strong>Code Quality Tools:</strong>
          <a rel="noreferrer" href="https://eslint.org/" target="_blank">ESLint</a>,
          <a rel="noreferrer" href="https://stylelint.io/" target="_blank">Stylelint</a>,
          <a rel="noreferrer" href="https://dprint.dev/" target="_blank">dprint</a>
          &amp;
          <a rel="noreferrer" href="https://prettier.io/" target="_blank">Prettier</a>
          provide automated code quality enforcement for solo development where peer code review isn’t available.
        </li>
        <li>
          <strong>Infrastructure as Code:</strong>
          <a rel="noreferrer" href="https://developer.hashicorp.com/terraform" target="_blank">Terraform</a>
          documents “what” infrastructure declaratively while supporting “why” reasoning through comments and module structure—crucial for
          infrequent infrastructure work.
        </li>
      </ul>

      <div class="description">
        <p>
          Static Site Generation requires tools purpose-built for that workflow rather than general bundlers adapted for static output.
          Astro’s zero-JS-by-default approach and
          <a rel="noreferrer" href="https://www.typescriptlang.org/" target="_blank">TypeScript</a>-native architecture provide better
          performance and developer experience than configuring general-purpose tools.
        </p>

        <p>
          Solo development benefits significantly from automated tooling that catches errors and enforces consistency. Without collaborative
          code review, linters and formatters serve as a safety net for maintaining code quality standards across the entire codebase.
        </p>

        <p>
          Infrastructure work happens infrequently but has high stakes. Terraform’s declarative approach combined with good organization
          ensures that both current configuration and historical reasoning remain accessible when returning to infrastructure tasks months
          later.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="setup" class="slide">
      <h2 class="decorated-heading third">Project setup and structure</h2>

      <ul class="key-points">
        <li>
          <strong>Build Framework Migration:</strong>
          Replaced
          <a rel="noreferrer" href="https://parceljs.org/" target="_blank">Parcel</a>
          with Astro to leverage its SSG-focused architecture and optimizations.
        </li>
        <li>
          <strong>Configuration Customization:</strong>
          Implemented strict configurations for code quality assurance.
        </li>
        <li>
          <strong>Infrastructure Organization:</strong>
          Restructured Terraform configuration into
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/infrastructure" target="_blank">modules</a>
          with a
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/main.tf" target="_blank">single entry point</a>
          for better maintainability.
        </li>
        <li>
          <strong>Documentation Structure:</strong>
          Established a dedicated
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/docs" target="_blank">documentation directory</a>
          for processes not captured in code or configuration.
        </li>
      </ul>

      <div class="description">
        <p>
          The project began as a Parcel-based static site that was migrated to Astro for its enhanced static site generation capabilities
          and built-in performance optimizations. Starting with Astro’s
          <a rel="noreferrer" href="https://github.com/withastro/astro/tree/main/examples/blog" target="_blank">blog template</a>
          provided a solid foundation that was customized to meet specific requirements.
        </p>

        <p>
          Strict configuration files for
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/tsconfig.json" target="_blank">TypeScript</a>,
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/eslint.config.ts" target="_blank">ESLint</a>, and
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/.stylelintrc.json" target="_blank">Stylelint</a>
          were implemented to enforce code quality standards. These configurations were carefully researched to incorporate both established
          best practices and recently maintained plugins that enhance development efficiency.
        </p>

        <p>
          I reduced project root clutter through file organization that improves findability of configuration files through well-known
          locations. The docs directory structure anticipates potential GitHub Pages integration.
        </p>
      </div>

      <div class="section-nav">
        <p class="deep-dive"><a href="setup.html">Go into detail about setting up this website.</a></p>

        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="developing" class="slide">
      <h2 class="decorated-heading fourth">Developing the website</h2>

      <ul class="key-points">
        <li>
          <strong>Web Components:</strong>
          Implemented native
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/src/components" target="_blank">Custom Elements</a>
          for interactive features like scroll tracking and dynamic content updates.
        </li>
        <li>
          <strong>Progressive Web App:</strong>
          Integrated
          <a rel="noreferrer" href="https://github.com/vite-pwa/astro" target="_blank">@vite-pwa/astro</a>
          to enhance
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/blob/5beb0b79635843a838fda30127aaa908518baf41/astro.config.ts#L10-L27"
            target="_blank"
          >performance and offline capabilities</a>
          for the static site.
        </li>
        <li>
          <strong>Content Security Policy:</strong>
          Utilized
          <a rel="noreferrer" href="https://github.com/kindspells/astro-shield" target="_blank">@kindspells/astro-shield</a>
          to generate <abbr title="Subresource Integrity">SRI</abbr> hashes and integrated them into
          <a rel="noreferrer" href="https://aws.amazon.com/amplify/" target="_blank">Amplify</a>
          deployment.
        </li>
        <li>
          <strong>Editor Integration:</strong>
          Configured
          <a rel="noreferrer" href="https://www.sublimetext.com/" target="_blank">Sublime Text</a>
          with appropriate linting and <abbr title="Language Server Protocol">LSP</abbr>
          <a
            rel="noreferrer"
            href="https://github.com/rgant/homedir/tree/main/Library/Application-Support/Sublime-Text-3/Packages/User"
            target="_blank"
          >packages</a>
          to enforce code quality during development.
        </li>
      </ul>

      <div class="description">
        <p>
          Rather than relying on JavaScript frameworks, the site uses native
          <a rel="noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements" target="_blank"
          >Custom Elements</a>
          for interactive features. This approach provides progressive enhancement with minimal JavaScript footprint while enabling modern
          functionality like scroll tracking for navigation highlights and dynamic content updates.
        </p>

        <p>
          <abbr title="Progressive Web App">PWA</abbr> features were implemented because
          <a rel="noreferrer" href="https://vite.dev/" target="_blank">Vite</a>
          and
          <a rel="noreferrer" href="https://github.com/GoogleChrome/workbox" target="_blank">Workbox</a>
          integration with Astro made them essentially free to add. <abbr title="Content Security Policy">CSP</abbr> with SRI hashes was
          prioritized despite poor tooling because security remains important even for small websites.
        </p>

        <p>
          The development workflow was optimized by configuring Sublime Text with appropriate linting and Language Server Protocol packages.
          This setup provides real-time code quality feedback and TypeScript type checking during the development process.
        </p>
      </div>

      <div class="section-nav">
        <p class="deep-dive"><a href="developing.html">More about the development of this website.</a></p>

        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="deploy" class="slide">
      <h2 class="decorated-heading fifth">Deployment and hosting</h2>

      <ul class="key-points">
        <li>
          <strong>AWS Amplify:</strong>
          Migrated from
          <a href="https://aws.amazon.com/s3/" title="AWS S3">S3</a>/<a href="https://aws.amazon.com/cloudfront/" title="AWS CloudFront"
          >CloudFront</a>
          to Amplify for better support of directory index files and simplified <abbr title="Secure Sockets Layer">SSL</abbr> management.
        </li>
        <li>
          <strong>Terraform:</strong>
          Enable reusability and standardized configurations that simplify management and enforce consistency, accelerating provisioning and
          reducing deployment errors.
        </li>
        <li>
          <strong>Scripted Deployment:</strong>
          Created
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/package.json#L18" target="_blank">npm scripts</a>
          for repeatable build and deployment processes without requiring CI/CD automation.
        </li>
        <li>
          <strong>Security Best Practices:</strong>
          Implemented
          <a href="https://aws.amazon.com/" title="Amazon Web Services">AWS</a>
          security recommendations, locked down S3 bucket access, and integrated Content Security Policy with SRI hashes.
        </li>
      </ul>

      <div class="description">
        <p>
          The site was migrated from S3/CloudFront to <abbr title="Amazon Web Services">AWS</abbr> Amplify to better support directory-level
          <code>index.html</code> files without compromising on SSL or performance. Despite some limitations in Terraform’s support for
          Amplify and challenges with custom configurations, the service provides an effective hosting solution for static sites.
        </p>

        <p>
          Infrastructure as code provides documentation that can detect drift and verify accuracy, though it requires maintenance to prevent
          provider compatibility issues. Budget alerts protect against unexpected cloud costs that can escalate rapidly. Even static sites
          warrant baseline security practices regardless of limited interactivity.
        </p>

        <p>
          The scripted approach reduces the need for complex CI/CD pipelines while ensuring consistent results and providing the foundation
          for future automation if needed. Content Security Policy headers with SRI hashes are automatically updated during the build
          process but must work around Terraform provider limitations.
        </p>
      </div>

      <div class="section-nav">
        <p class="deep-dive"><a href="deploy.html">More details about deploying this website.</a></p>

        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="lessons" class="slide">
      <h2 class="decorated-heading second">Lessons learned</h2>

      <ul class="key-points">
        <li>
          <strong>Infrastructure Maintenance:</strong>
          Regular Terraform plan runs are necessary to manage AWS’s rapid evolution and prevent challenging catch-up scenarios.
        </li>
        <li>
          <strong>Framework Selection:</strong>
          Astro provides superior out-of-the-box static site generation capabilities compared to Parcel’s custom plugin requirements.
        </li>
        <li>
          <strong>Community Integration Challenges:</strong>
          Navigating Astro’s ecosystem of similar but competing integrations with varying maintenance levels requires careful evaluation.
        </li>
        <li>
          <strong>Linting Evolution:</strong>
          Keeping up with ESLint and Stylelint configuration format changes while using third-party plugins requires additional effort.
        </li>
        <li>
          <strong>PWA Knowledge Gaps:</strong>
          Deeper understanding of Workbox is necessary for optimal Progressive Web App configuration and troubleshooting.
        </li>
      </ul>

      <div class="description">
        <p>
          Managing rapidly evolving AWS infrastructure through Terraform requires a regular maintenance schedule to avoid complicated
          catch-up scenarios. Scheduled quarterly Terraform plan runs help identify drift and necessary updates before they become
          unmanageable. Similarly, navigating Astro’s ecosystem of community integrations and keeping up with linting tool plugin changes
          showed the importance of evaluating maintenance status and compatibility before adoption.
        </p>

        <p>
          Implementing Progressive Web App features revealed knowledge gaps around Workbox configuration that would benefit from deeper
          understanding for optimal implementation. Using TypeScript for configuration files provides better editor support and type
          checking, but can introduce additional complexity when tools and plugins have not fully embraced TypeScript.
        </p>
      </div>

      <div class="section-nav">
        <p class="deep-dive"><a href="lessons.html">Dive into the lessons I learned while building this website.</a></p>

        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <aside>
      <nav aria-labelledby="section-nav">
        <h3 id="section-nav" class="decorated-heading primary">Continue reading about my site</h3>
        <MySiteNav />
      </nav>
    </aside>

    <!-- <section id="history">
      <h2>Page history</h2>

      <ol>
        <li>
          Add SRI hashes to CSP headers. Don’t inline resources for better security.
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/compare/03bfbd1..c888b04#diff-somehashvalue" target="_blank"
          >changes</a>
          <time datetime="2025-03-03 15:29:41 -0500">3/3/2025, 3:29:41 PM</time>
        </li>
        <li>
          Add SRI hashes to CSP headers. Don’t inline resources for better security.
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/compare/cc44250..03bfbd1#diff-somehashvalue" target="_blank"
          >changes</a>
          <time datetime="2025-03-02 20:22:57 -0500">3/2/2025, 8:22:57 PM</time>
        </li>
      </ol>
    </section> -->
  </article>
</Structure>
