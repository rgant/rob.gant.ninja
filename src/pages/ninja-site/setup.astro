---
import ArticleHeader from '~/components/article-header.astro';
import BaseHead from '~/components/base-head.astro';
import MySiteNav from '~/components/my-site-nav.astro';
import ScrollNavigation from '~/components/scroll-navigation/scroll-navigation.astro';
import Structure from '~/layouts/structure.astro';
import '~/styles/article-pages.css';
import { unwrap } from '~/unwrap.util';

const description = unwrap`Setting up an Astro TypeScript static site generator project with strict
  linting, modular Terraform infrastructure, and organized development workflow.`;
---
<Structure>
  <BaseHead description={description} slot="head" title="Setup an Astro TypeScript SSG Project" />

  <ArticleHeader currentPage="setup.html">
    <h1 class="decorated-heading primary">Project setup and structure</h1>
    <p>Starting out with an organized development workflow</p>
  </ArticleHeader>

  <article class="presentation">
    <aside>
      <nav aria-labelledby="article-nav">
        <h3 id="article-nav">On this page</h3>
        <ScrollNavigation>
          <ul class="in-page-nav">
            <li><a href="#environment">Development environment</a></li>
            <li><a href="#dependencies">Dependency management</a></li>
            <li><a href="#migration">Framework migration</a></li>
            <li><a href="#configuration">Build process configuration</a></li>
            <li><a href="#infrastructure">Infrastructure organization</a></li>
            <li><a href="#challenges">Setup challenges</a></li>
            <li><a href="#future">Future improvements</a></li>
          </ul>
        </ScrollNavigation>
      </nav>
    </aside>

    <section id="environment" class="slide">
      <h2 class="decorated-heading second">Development environment</h2>

      <ul class="key-points">
        <li>
          <strong>Language Version Management:</strong>
          I use <a rel="noreferrer" href="https://github.com/nvm-sh/nvm" target="_blank" title="Node Version Manager">nvm</a> for
          <a rel="noreferrer" href="https://nodejs.org/en" target="_blank">Node.js</a>
          version management when working across multiple projects with different requirements.
        </li>
        <li>
          <strong>Package Manager Choice:</strong>
          <a rel="noreferrer" href="https://www.npmjs.com/" target="_blank" title="Node Package Manager">npm</a>
          works well enough as the default Node.js package manager, with
          <a rel="noreferrer" href="https://github.com/nodejs/corepack" target="_blank">Corepack</a>
          enabling cross-project compatibility.
        </li>
        <li>
          <strong>Editor Configuration:</strong>
          Configuring linters, <abbr title="Language Server Protocol">LSP</abbr> servers, and formatters improve development efficiency. Try
          out <abbr title="Large Language Model">LLM</abbr> assistants to see if you find them helpful.
        </li>
        <li>
          <strong>Configuration Documentation:</strong>
          I comment configuration files and linking to source configurations for future reference and updates.
        </li>
      </ul>

      <div class="description">
        <p>
          Language version management tools like <abbr title="Node Version Manager">nvm</abbr> are essential when working across multiple
          projects with different version requirements. I use <abbr title="Node Package Manager">npm</abbr> because it’s the default package
          manager that comes with Node.js, though other package managers work equally well. Corepack ensures access to the appropriate
          package manager for each codebase regardless of personal preference. Although npm will not include Corepack by default, it will
          remain available as a separate installation for cross-project package manager compatibility.
        </p>

        <p>
          Editor setup improves developer efficiency. Prioritize linter integration for code quality, LSP for type checking and
          autocomplete, and formatters for consistency. While automatic formatting helps maintain consistency, manual formatting control
          often produces cleaner results.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="dependencies" class="slide">
      <h2 class="decorated-heading third">Dependency management</h2>

      <ul class="key-points">
        <li>
          <strong>Version Range Management:</strong>
          Follow framework template conventions for version ranges before implementing custom policies. Generally tilde ranges (<code
          >~1.2.4</code>) for production dependencies and caret ranges (<code>^1.3.2</code>) for <code>devDependencies</code>, but since
          this project runs entirely locally, minor release flexibility provides better security updates without deployment risk.
        </li>
        <li>
          <strong>Dependency Locking:</strong>
          I recommend locking dependency versions and committing lock files to ensure reproducible builds across environments. Organize
          dependencies between production (necessary for the primary goal) and development (workflow tools like linters and compilers), with
          <code>devDependencies</code> accepting more frequent updates in <code>package.json</code>.
        </li>
        <li>
          <strong>Cross-Platform Compatibility:</strong>
          I encountered compatibility issues between development and deployment environments. Windows vs. Linux can often need separate
          dependencies even in straightforward projects.
        </li>
      </ul>

      <div class="description">
        <p>
          Lock dependencies to prevent unexpected version changes that can break builds or introduce inconsistencies between team members.
          For web applications or sites, I categorize dependencies as production (necessary for building the website) versus development
          (linters, compilers, and development tools). Development dependencies can accept more frequent updates in version range specifiers
          since they don’t affect the final build output.
        </p>

        <p>
          Regular dependency updates should be routine rather than intimidating when combined with strict code quality enforcement and
          automated testing that catch regressions early. Cross-platform compatibility awareness helps avoid deployment surprises,
          particularly between Unix-like development environments and different production platforms. You must balance version range
          stability with security updates, especially for development tools that change rapidly.
        </p>

        <p>
          Cross-platform compatibility awareness helps avoid deployment surprises, particularly between Unix-like development environments
          and different production platforms.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="migration" class="slide">
      <h2 class="decorated-heading fourth">Framework migration</h2>

      <ul class="key-points">
        <li>
          <strong>Build Framework Migration:</strong>
          I replaced <a rel="noreferrer" href="https://parceljs.org/" target="_blank">Parcel</a> with
          <a rel="noreferrer" href="https://astro.build/" target="_blank">Astro</a>
          to leverage its <abbr title="Static Site Generation">SSG</abbr>-focused architecture and optimizations.
        </li>
        <li>
          <strong>Template Foundation:</strong>
          Starting with Astro’s
          <a rel="noreferrer" href="https://github.com/withastro/astro/tree/main/examples/blog" target="_blank">blog template</a>
          provided a solid foundation.
        </li>
        <li>
          <strong>Custom Plugin Elimination:</strong>
          The migration eliminated
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/tree/a2f09756cfe1b357689677cf20c234e1354d95fc/packages"
            target="_blank"
          >custom plugins</a>
          that were required by Parcel for SSG functionality.
        </li>
      </ul>

      <div class="description">
        <p>
          The project began as a Parcel-based static site that required custom plugins to achieve static site generation capabilities. Astro
          treats static sites as first-class rather than an afterthought, eliminating the need for custom plugin development while providing
          built-in SSG optimizations and better performance.
        </p>

        <p>
          Starting with Astro's blog template and a strict
          <a rel="noreferrer" href="https://www.typescriptlang.org/" target="_blank">TypeScript</a>
          configuration, which included settings for build processes and development server setup, sped up development.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="configuration" class="slide">
      <h2 class="decorated-heading fifth">Build process configuration</h2>

      <ul class="key-points">
        <li>
          <strong>Security:</strong>
          I implemented <a rel="noreferrer" href="https://github.com/kindspells/astro-shield" target="_blank">@kindspells/astro-shield</a>
          for <abbr title="Subresource Integrity">SRI</abbr> hash generation in <abbr title="Content Security Policy">CSP</abbr> headers.
        </li>
        <li>
          <strong>Optimizations:</strong>
          I use <a rel="noreferrer" href="https://github.com/playform/compress" target="_blank">@playform/compress</a> for asset
          minification, although it has outdated dependencies requiring workarounds.
        </li>
        <li>
          <strong>Performance:</strong>
          I integrated <a rel="noreferrer" href="https://github.com/vite-pwa/astro" target="_blank">@vite-pwa/astro</a> for resource
          precaching and offline capabilities.
        </li>
        <li>
          <strong>Configuration Strictness:</strong>
          I established strict
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/tsconfig.json" target="_blank">TypeScript</a>,
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/eslint.config.ts" target="_blank">ESLint</a>, and
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/.stylelintrc.json" target="_blank">Stylelint</a>
          configurations.
        </li>
      </ul>

      <div class="description">
        <p>
          I prioritized security then performance because they are vital requirements for modern web projects. @kindspells/astro-shield
          provides essential security headers with SRI hashes, while @vite-pwa/astro delivers performance benefits through resource
          precaching that benefit even static sites.
        </p>

        <p>
          @playform/compress handles asset optimization but relies on outdated tools like
          <a rel="noreferrer" href="https://github.com/css/csso" target="_blank">csso</a>
          (conflicts with modern <abbr title="Cascading Style Sheets">CSS</abbr>) and
          <a rel="noreferrer" href="https://github.com/terser/html-minifier-terser" target="_blank">html-minifier-terser</a>
          (unmaintained). Manual optimization documented in
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/docs/optimizing-svgs.md" target="_blank"><code
          >optimizing-svgs.md</code></a>
          addresses limitations with CSS background-image compression.
        </p>

        <p>
          Strict configurations were carefully researched to incorporate established best practices and recently maintained plugins. The
          research process involved examining multiple configuration examples, plugin documentation, and community discussions to understand
          the implications of different rule sets. I resolved configuration conflicts between tools to keep both code quality and
          development efficiency. Some plugins required custom configuration due to project-specific requirements or compatibility issues
          with other tools in the development stack.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="infrastructure" class="slide">
      <h2 class="decorated-heading second">Infrastructure organization</h2>

      <ul class="key-points">
        <li>
          <strong>Modular Structure:</strong>
          I organized <a rel="noreferrer" href="https://developer.hashicorp.com/terraform" target="_blank">Terraform</a>
          configuration into reusable
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/infrastructure/amplify" target="_blank">modules</a>
          for better maintainability.
        </li>
        <li>
          <strong>Single Entry Point:</strong>
          Creating <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/main.tf" target="_blank">main.tf</a>
          as a single entry point helps eliminate project root clutter.
        </li>
        <li>
          <strong>Component Organization:</strong>
          I recommend separating infrastructure into logical modules for
          <a rel="noreferrer" href="https://aws.amazon.com/amplify/" target="_blank">AWS Amplify</a>,
          <a rel="noreferrer" href="https://aws.amazon.com/s3/" target="_blank" title="AWS S3">S3</a>
          buckets, <abbr title="Domain Name System">DNS</abbr>, and remote state management.
        </li>
      </ul>

      <div class="description">
        <p>
          The Terraform configuration consists of modular components handling different
          <a rel="noreferrer" href="https://aws.amazon.com/" target="_blank" title="Amazon Web Services">AWS</a>
          infrastructure aspects. The Amplify module includes resources for the app, branch configuration, domain association, and custom
          headers. Additional modules manage S3 buckets, DNS configuration, and remote state storage.
        </p>

        <p>
          Directory organization eliminated project root clutter that made it difficult to locate important files among numerous
          configuration files. Terraform modules organize components into well-known locations for easier navigation during maintenance and
          updates.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="challenges" class="slide">
      <h2 class="decorated-heading third">Setup challenges</h2>

      <ul class="key-points">
        <li>
          <strong>Environment Variable Management:</strong>
          I created a
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/.auto.tfvars.example" target="_blank"><code
          >.auto.tfvars.example</code></a>
          pattern for Terraform variables while excluding actual values from version control.
        </li>
        <li>
          <strong>Astro Configuration Compatibility:</strong>
          Resolving <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/src/env.d.ts" target="_blank"><code
          >env.d.ts</code></a>
          requirements for @vite-pwa/astro required research because Astro no longer adds this file in the starter template.
        </li>
        <li>
          <strong>Documentation Structure:</strong>
          I established a dedicated
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/docs" target="_blank">documentation directory</a>
          which can also be used for eventual GitHub Pages documentation website.
        </li>
      </ul>

      <div class="description">
        <p>
          I researched environment variable management to determine appropriate patterns for both Terraform and Astro configurations. The
          <code>.auto.tfvars.example</code> pattern provides template guidance while maintaining security by excluding actual values from
          version control. Terraform automatically includes <code>.auto.tfvars</code> file when running commands, making this a convenient
          pattern for local configuration.
        </p>

        <p>
          <abbr title="Progressive Web App">PWA</abbr> integration presented compatibility challenges as Astro moves away from
          <code>env.d.ts</code> while @vite-pwa/astro still requires it. Resolving this required consulting documentation from both projects
          to ensure long-term compatibility and support.
        </p>

        <p>
          The docs directory follows GitHub Pages patterns, providing a convenient location for documentation that doesn’t clutter the
          project root.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="future" class="slide">
      <h2 class="decorated-heading fourth">Future improvements</h2>

      <ul class="key-points">
        <li>
          <strong>Development Environment Modernization:</strong>
          I’m considering <a rel="noreferrer" href="https://devenv.sh/" target="_blank">devenv.sh</a>
          for comprehensive development environment management, though potential workflow changes require careful evaluation.
        </li>
        <li>
          <strong>Automated Formatting Integration:</strong>
          Worth exploring <a rel="noreferrer" href="https://github.com/lint-staged/lint-staged" target="_blank">lint-staged</a>
          to automatically format files before commit, improving consistency without manual intervention.
        </li>
        <li>
          <strong>Build Tool Replacement:</strong>
          I plan to replace @playform/compress with modern alternatives that support CSS background-image optimization and maintained
          <abbr title="HyperText Markup Language">HTML</abbr> minification. Worth evaluating
          <a rel="noreferrer" href="https://github.com/j9t/html-minifier-next" target="_blank">html-minifier-next</a>
          because of updated dependencies and indications of active maintenance and progress.
        </li>
        <li>
          <strong>Direct Vite Integration:</strong>
          Evaluating a switch to direct
          <a rel="noreferrer" href="https://github.com/parcel-bundler/lightningcss" target="_blank">lightningcss</a>
          integration through <a rel="noreferrer" href="https://vite.dev/" target="_blank">Vite</a>
          for better CSS processing and fewer dependency layers.
        </li>
        <li>
          <strong>Plugin Modernization:</strong>
          I continue periodic evaluation of older plugins for actively maintained alternatives with better feature sets.
        </li>
      </ul>

      <div class="description">
        <p>
          Development environment management could benefit from more better tools like devenv.sh, though such changes require considering
          workflow changes versus benefits. Similarly, automated formatting through lint-staged could reduce manual formatting effort while
          maintaining code consistency.
        </p>

        <p>
          The current build optimization stack has maintenance challenges with outdated dependencies like csso and html-minifier-terser.
          Finding modern replacements that handle CSS background-image optimization and reliable HTML minification would eliminate these
          technical debt concerns. html-minifier-next is a likely candidate for HTML minification options, and I will consider adding
          support to @playform/compress.
        </p>

        <p>
          Direct Vite integration for CSS processing through lightningcss could simplify the build pipeline and provide better CSS
          optimization. Ongoing plugin evaluation ensures the project benefits from community improvements while avoiding abandoned or
          problematic dependencies.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <aside>
      <nav aria-labelledby="section-nav">
        <h3 id="section-nav" class="decorated-heading primary">Continue reading about my site</h3>
        <MySiteNav />
      </nav>
    </aside>
  </article>
</Structure>
