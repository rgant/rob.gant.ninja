---
import ArticleHeader from '~/components/article-header.astro';
import BaseHead from '~/components/base-head.astro';
import MySiteNav from '~/components/my-site-nav.astro';
import ScrollNavigation from '~/components/scroll-navigation.astro';
import Structure from '~/layouts/structure.astro';
import '~/styles/article-pages.css';
import { unwrap } from '~/scripts/server/unwrap.util';

const description = unwrap`Developing with Astro and native Custom Elements for interactive features,
  implementing Progressive Web App capabilities, and integrating Content Security Policy with SRI hashes.`;
---
<Structure>
  <BaseHead description={description} slot="head" title="Developing with Astro and Web Components" />

  <ArticleHeader currentPage="developing.html">
    <h1 class="decorated-heading primary">Developing the website</h1>
    <p>Building interactive features with native web technologies</p>
  </ArticleHeader>

  <article class="presentation">
    <aside>
      <nav aria-labelledby="article-nav">
        <h3 id="article-nav">On this page</h3>
        <ScrollNavigation>
          <ul class="in-page-nav">
            <li><a href="#components">Custom Elements architecture</a></li>
            <li><a href="#pwa">Progressive Web App integration</a></li>
            <li><a href="#security">Content Security Policy implementation</a></li>
            <li><a href="#environment">Development environment</a></li>
            <li><a href="#experience">Astro development experience</a></li>
            <li><a href="#decisions">Technical decision framework</a></li>
          </ul>
        </ScrollNavigation>
      </nav>
    </aside>

    <section id="components" class="slide">
      <h2 class="decorated-heading second">Custom Elements architecture</h2>

      <ul class="key-points">
        <li>
          <strong>Web Components:</strong>
          I chose native
          <a rel="noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements" target="_blank"
          >Custom Elements</a>
          over
          <a rel="noreferrer" href="https://angular.dev/" target="_blank">Angular</a>/<a
            rel="noreferrer"
            href="https://react.dev/"
            target="_blank"
          >React</a>/<a rel="noreferrer" href="https://vuejs.org/" target="_blank">Vue</a>
          because a small amount of code could accomplish the interactive goals without framework overhead.
        </li>
        <li>
          <strong>Career Experience Component:</strong>
          I implemented
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/tree/main/src/scripts/client/years-experience" target="_blank"
          >progressive enhancement</a>
          that provides static dates in <abbr title="HyperText Markup Language">HTML</abbr> with dynamic updates.
        </li>
        <li>
          <strong>Scroll Navigation Component:</strong>
          Migrated from
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/blob/a2f09756cfe1b357689677cf20c234e1354d95fc/src/js/index-scroll.js"
            target="_blank"
          >jQuery scroll events</a> to
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/blob/main/src/scripts/client/scroll-navigation.component.ts"
            target="_blank"
          >Intersection Observer</a>
          for better performance and modern <abbr title="Application Programming Interface">API</abbr> usage.
        </li>
        <li>
          <strong>Intersection Observer Configuration:</strong>
          Used <code>rootMargin: '-20% 0px -80%'</code> which counterintuitively results a 1-pixel height observation area that ensures only
          one section can have <code>isIntersecting: true</code> at any time, preventing multiple navigation items from activating
          simultaneously. The -20% top margin positions the observation area about one-fifth down the viewport for smoother navigation
          transitions.
        </li>
        <li>
          <strong><abbr title="Document Object Model">DOM</abbr> Encapsulation:</strong>
          Custom Elements enable accessing navigation elements within component tags without requiring global IDs or unique classes.
        </li>
      </ul>

      <div class="description">
        <p>
          For a static website with minimal interactive requirements, JavaScript frameworks introduce unnecessary complexity and bundle
          size. Native Custom Elements work well enough while keeping the DOM and logic co-located, improving maintainability and reducing
          the complexity of managing framework-specific patterns for simple interactions.
        </p>

        <p>
          The career experience component uses progressive enhancement by serving static calculation in the initial HTML for non-JavaScript
          environments while automatically updating to current calculations when JavaScript executes. This approach ensures the content
          remains functional and informative regardless of JavaScript availability while providing enhanced accuracy when possible.
        </p>

        <p>
          The scroll navigation feature existed in the previous
          <a rel="noreferrer" href="https://parceljs.org/" target="_blank">Parcel</a>-based website using
          <a rel="noreferrer" href="https://jquery.com/" target="_blank">jQuery</a>
          scroll events. While scroll events werenâ€™t actually problematic for this simple single-page site, migrating to Intersection
          Observer provided better performance characteristics and follows current practices. Typical Intersection Observer implementations
          for this type of feature watch for heading elements, but mine triggers on any part of the section content instead.
        </p>

        <p>
          Configuring the Intersection Observer required understanding that <code>rootMargin</code> syntax differs from
          <abbr title="Cascading Style Sheets">CSS</abbr> margin properties, where negative percentages shrink the root intersection area
          rather than expanding it. The fundamental problem with default Intersection Observer behavior for this case is that multiple
          sections can intersect simultaneously, making it impractical to identify which section should actually activate the corresponding
          navigation item. The solution ensures that only one section intersects at any time.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="pwa" class="slide">
      <h2 class="decorated-heading third">Progressive Web App integration</h2>

      <ul class="key-points">
        <li>
          <strong>Motivation:</strong>
          <a rel="noreferrer" href="https://html5boilerplate.com/" target="_blank">HTML5 Boilerplate</a>
          includes a default <code>site.webmanifest</code> file, and research showed <abbr title="Progressive Web App">PWA</abbr> features
          are essentially free to implement with
          <a rel="noreferrer" href="https://vite.dev/" target="_blank">Vite</a> and
          <a rel="noreferrer" href="https://github.com/GoogleChrome/workbox" target="_blank">Workbox</a> integration.
        </li>
        <li>
          <strong>Implementation:</strong>
          I used
          <a rel="noreferrer" href="https://github.com/vite-pwa/astro" target="_blank">@vite-pwa/astro</a> with separate
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/webmanifest.json" target="_blank"><code
          >webmanifest.json</code></a>
          to keep static configuration outside build files.
        </li>
        <li>
          <strong>Performance Benefits:</strong>
          Resource precaching improves loading times for multi-page navigation, though not critical for the original single-page
          architecture.
        </li>
        <li>
          <strong>Configuration Challenges:</strong>
          Required both
          <a rel="noreferrer" href="https://vite-pwa-org.netlify.app/guide/" target="_blank">Vite PWA documentation</a> and
          <a rel="noreferrer" href="https://developer.chrome.com/docs/workbox/" target="_blank">official Workbox docs</a>
          along with example configurations to understand option purposes.
        </li>
        <li>
          <strong>Integration Requirements:</strong>
          Resolved
          <a rel="noreferrer" href="https://www.typescriptlang.org/" target="_blank">TypeScript</a>
          recognition by adding references to
          <a rel="noreferrer" href="https://github.com/rgant/rob.gant.ninja/blob/main/src/env.d.ts" target="_blank"><code
          >env.d.ts</code></a>
          and configured script import in an
          <a
            rel="noreferrer"
            href="https://github.com/rgant/rob.gant.ninja/blob/feature/ninja-site/src/components/end-scripts.astro"
            target="_blank"
          >EndScripts component</a>.
        </li>
      </ul>

      <div class="description" class="slide">
        <p>
          The decision to implement PWA features came from learning that many developers consider them essentially free additions when using
          modern build tools. Since HTML5 Boilerplate had already included a manifest file that went unused, researching PWA implementation
          revealed minimal effort required for performance improvements.
        </p>

        <p>
          Workbox configuration required careful testing of build artifacts to ensure the precache list included necessary resources while
          excluding unnecessary ones. The
          <a rel="noreferrer" href="https://github.com/vite-pwa/astro/tree/main/examples" target="_blank">vite-pwa examples</a>
          demonstrate practically every available option but lack clear explanations of individual option purposes, requiring me to check
          multiple documentation sources to understand the configuration impact.
        </p>

        <p>
          While PWA features arenâ€™t required for basic static websites, they represent necessary infrastructure for modern web applications.
          Implementing them on a simple site provides familiarity with the tooling and patterns that will be essential for more complex
          projects requiring offline capabilities and enhanced performance characteristics.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="security" class="slide">
      <h2 class="decorated-heading fourth">Content Security Policy implementation</h2>

      <ul class="key-points">
        <li>
          <strong>Security Analysis Compliance:</strong>
          Implemented <abbr title="Content Security Policy">CSP</abbr> with <abbr title="Subresource Integrity">SRI</abbr> hashes based on
          recommendations from
          <a rel="noreferrer" href="https://developer.mozilla.org/en-US/observatory/analyze?host=rob.gant.ninja" target="_blank"
          >Mozilla Observatory</a> security analysis tools.
        </li>
        <li>
          <strong>Static Site Strategy:</strong>
          Chose SRI hashes over nonces because server-side code generation isnâ€™t available for static sites, making SRI the most secure
          alternative approach.
        </li>
        <li>
          <strong>Implementation Tool:</strong>
          Used
          <a rel="noreferrer" href="https://github.com/kindspells/astro-shield" target="_blank">@kindspells/astro-shield</a>
          for automatic SRI hash generation and integration with build process.
        </li>
        <li>
          <strong>Asset Inlining Decision:</strong>
          Disabled resource inlining (<code>assetsInlineLimit: 0</code>) based on security analysis recommendations, accepting minimal
          performance cost for security boundary benefits.
        </li>
        <li>
          <strong>Current Compromise:</strong>
          Using <code>script-src 'self'</code> as the only relaxed rule, with plans to evaluate removing <code>'self'</code> directive in
          future iterations.
        </li>
      </ul>

      <div class="description">
        <p>
          Security analysis tools and Angularâ€™s improved support motivated the CSP implementation. Rather than implementing relaxed rules
          that provide minimal security benefits, the strict approach with SRI hashes provides meaningful protection against code injection
          attacks, even for static sites with limited server-side functionality.
        </p>

        <p>
          SRI hash integration was the primary technical challenge, specifically how to inject dynamically generated hashes into
          <abbr title="HyperText Transfer Protocol">HTTP</abbr> response headers managed by
          <a rel="noreferrer" href="https://aws.amazon.com/amplify/" target="_blank">AWS Amplify</a>. The @kindspells/astro-shield tool
          handles hash computation effectively, but requires custom scripting to export hashes in
          <abbr title="JavaScript Object Notation">JSON</abbr> format for
          <a rel="noreferrer" href="https://developer.hashicorp.com/terraform" target="_blank">Terraform</a>
          consumption, as detailed in the
          <a href="deploy.html">deployment</a> process.
        </p>

        <p>
          Disabling asset inlining eliminates potential security vulnerabilities where inline resources could bypass CSP restrictions. The
          performance cost of additional HTTP requests proved negligible compared to the security boundary benefits, particularly when
          pursuing comprehensive security analysis tool compliance. The goal of achieving clean security reports from analysis tools
          justified the trade-off between minimal performance costs and enhanced security posture.
        </p>

        <p>
          Future improvements will explore
          <a rel="noreferrer" href="https://docs.astro.build/en/reference/experimental-flags/csp/" target="_blank"
          >Astroâ€™s experimental CSP features</a>
          currently in beta and evaluate whether the <code>'self'</code> directive can be removed entirely while maintaining functionality.
          The current CSP configuration provides a solid foundation for expansion as the site grows in complexity.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="environment" class="slide">
      <h2 class="decorated-heading fifth">Development environment</h2>

      <ul class="key-points">
        <li>
          <strong>Editor Choice:</strong>
          Configured
          <a rel="noreferrer" href="https://www.sublimetext.com/" target="_blank">Sublime Text</a>
          with linting and <abbr title="Language Server Protocol">LSP</abbr> packages for code quality enforcement during development.
        </li>
        <li>
          <strong>Configuration Reference:</strong>
          Sublime Text configuration available at
          <a
            rel="noreferrer"
            href="https://github.com/rgant/homedir/tree/main/Library/Application-Support/Sublime-Text-3/Packages/User"
            target="_blank"
          >GitHub User Package repository</a> for interested developers.
        </li>
      </ul>

      <div class="description">
        <p>
          While most developers use
          <a rel="noreferrer" href="https://code.visualstudio.com/" target="_blank" title="Visual Studio Code">VSCode</a>, Sublime Text
          remains a viable option with proper LSP and linting integration. The configuration provides real-time feedback for TypeScript,
          <a rel="noreferrer" href="https://eslint.org/" target="_blank">ESLint</a>, and
          <a rel="noreferrer" href="https://stylelint.io/" target="_blank">Stylelint</a>
          rules, ensuring code quality standards are maintained throughout the development process. Since this represents a minority editor
          choice, detailed configuration explanation would benefit few readers compared to linking to the complete setup for those
          specifically interested in Sublime Text workflows.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="experience" class="slide">
      <h2 class="decorated-heading second">Astro development experience</h2>

      <ul class="key-points">
        <li>
          <strong>TypeScript Integration:</strong>
          <a rel="noreferrer" href="https://astro.build/" target="_blank">Astroâ€™s</a> native TypeScript support provides excellent developer
          experience without additional configuration complexity.
        </li>
        <li>
          <strong>Build Process Coordination:</strong>
          Tool integration requires attention to execution order, ensuring SRI hash computation occurs after compression and PWA generation.
        </li>
        <li>
          <strong>Development Server:</strong>
          Vite-powered development server provides fast hot reload and developer experience improvements.
        </li>
        <li>
          <strong>Astro Islands Limitation:</strong>
          Islands architecture only supports <abbr title="Single Page Application">SPA</abbr> frameworks like React and Vue, not native
          Custom Elements integration.
        </li>
      </ul>

      <div class="description">
        <p>
          Astroâ€™s TypeScript-first approach eliminates the configuration overhead typically associated with adding TypeScript to JavaScript
          frameworks. The build process integration between multiple tools requires minimal coordination beyond ensuring SRI hash
          computation happens after all asset optimization and PWA manifest generation completes.
        </p>

        <p>
          The Vite development server provides better performance than previous build tool experiences, explaining why frameworks like
          Angular are migrating to Vite-based development servers. The hot reload functionality works reliably with the TypeScript and
          Custom Elements combination without requiring special configuration.
        </p>

        <p>
          While Astro Islands provide powerful partial hydration capabilities for framework components, the lack of direct Custom Elements
          support represents a missed opportunity for developers preferring native web technologies over framework dependencies. This
          limitation doesnâ€™t affect functionality but prevents leveraging Astroâ€™s selective hydration optimizations for Custom Elements.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <section id="decisions" class="slide">
      <h2 class="decorated-heading third">Technical decision framework</h2>

      <ul class="key-points">
        <li>
          <strong>Tool Selection Criteria:</strong>
          Prioritize identifying the correct tool for specific job requirements rather than using familiar tools regardless of fit.
        </li>
        <li>
          <strong>Framework vs Native Choice:</strong>
          Astro and Custom Elements proved correct for static site requirements compared to React and
          <abbr title="Server-Side Rendering">SSR</abbr> alternatives.
        </li>
        <li>
          <strong>Security vs Performance Trade-offs:</strong>
          Default to security when faced with trade-offs, trusting that performance improvements occur over time while security typically
          degrades without active maintenance.
        </li>
        <li>
          <strong>Optimal Strategy:</strong>
          Pursue both security and performance when possible, accepting trade-offs only when genuine conflicts exist between requirements.
        </li>
      </ul>

      <div class="description">
        <p>
          The framework selection process shows why of matching tools to specific requirements rather than defaulting to popular choices.
          For a static site with minimal interactivity, Custom Elements works well enough without the overhead and complexity of larger
          frameworks designed for complex application state management.
        </p>

        <p>
          The security-first approach when facing trade-offs reflects the reality that performance optimizations continue improving through
          tool updates and hardware advancement, while security posture tends to degrade over time without active maintenance. This
          perspective influenced decisions like disabling asset inlining and implementing strict CSP policies despite minimal performance
          costs.
        </p>

        <p>
          When genuine conflicts between security and performance requirements donâ€™t exist, pursuing both objectives simultaneously produces
          superior outcomes. The PWA implementation demonstrates this approach by providing both security benefits through manifest
          configuration and performance improvements through resource precaching without compromising either objective.
        </p>
      </div>

      <div class="section-nav">
        <a href="#article-nav" class="top-link" title="Back to navigation">Top</a>
      </div>
    </section>

    <aside>
      <nav aria-labelledby="section-nav">
        <h3 id="section-nav" class="decorated-heading primary">Continue reading about my site</h3>
        <MySiteNav />
      </nav>
    </aside>
  </article>
</Structure>
